1) Зачем нужно паралленьное исполнение задачь.

Параллельное исполнение задач позволяет увеличить производительность и скорость выполнения программы. 
Это особенно полезно для задач, которые требуют большого количества вычислений или обработки больших объемов данных. 
Параллельное исполнение позволяет использовать ресурсы компьютера более эффективно, распределяя задачи между несколькими ядрами процессора или компьютерами в сети.

2) Что такое переключение контекста.

Переключение контекста - это процесс перехода от выполнения одной задачи к другой. Когда операционная система переключает контекст, 
она сохраняет состояние текущей задачи и загружает состояние следующей задачи. 
Это позволяет эффективно использовать ресурсы процессора, позволяя нескольким задачам выполняться параллельно.

3) Процессы и потоки.

Процессы и потоки - это два способа организации параллельного выполнения задач в операционной системе. 

Процесс - это отдельный экземпляр программы, который имеет свою собственную область памяти и выполняется независимо от других процессов. 
Поток - это отдельный путь выполнения внутри процесса, который может выполняться параллельно с другими потоками в этом же процессе. 
Они имеют доступ к общей области памяти процесса

4) От чего зависит максимальный прирост производительности многопоточного алгоритма по сравнению с однопотчным? 
Почему реальный прирост меньше?

Максимальный прирост производительности многопоточного алгоритма зависит от характеристик задачи и аппаратных ресурсов компьютера.
В идеальном случае, если задача может быть полностью разделена на независимые подзадачи, максимальный прирост производительности может быть равен числу ядер процессора.
В реальности, существуют ограничения на количество доступных ресурсов (например, память и скорость передачи данных), 
а также наличие блокирующих операций, например блокировка ресурса, состояние гонки, которые могут замедлять выполнение задачи, плюс время переключения контекста и 

5) Какие факторы необходимо учитывать при распараллеливании алгоритмов для увеличения производительности.


При распараллеливании алгоритмов необходимо учитывать характеристики задачи, доступные ресурсы, структуру данных и возможность их разделения на независимые подзадачи. 
Также необходимо учитывать возможность блокировки и синхронизации потоков, чтобы избежать гонок данных и других проблем, связанных с параллельным выполнением.